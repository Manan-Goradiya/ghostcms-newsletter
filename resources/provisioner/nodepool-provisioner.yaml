apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: gnostcms-nodepool
spec:
  template:
    metadata:
      labels:
        intent: gnostcms-stag
    spec:
      requirements:
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["on-demand"]
        - key: karpenter.k8s.aws/instance-category
          operator: In
          values: ["t"]
        - key: karpenter.k8s.aws/instance-family
          operator: In
          values: ["t4g", "t3a"]
        - key: karpenter.k8s.aws/instance-size
          operator: In
          values: ["medium","large","xlarge","2xlarge","small"]
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: gnostcms-ec2nodeclass
  limits:
    cpu: 100
  disruption:
    consolidationPolicy: WhenEmptyOrUnderutilized
    consolidateAfter: Never
---
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: gnostcms-ec2nodeclass
spec:
  amiFamily: AL2023
  amiSelectorTerms:
     - alias: al2023@latest
  blockDeviceMappings:
  - deviceName: /dev/xvda
    ebs:
      encrypted:  false #true
      volumeSize: 100Gi
      volumeType: gp3
  instanceProfile: "${INSTANCE_PROFILE}" # replace with your cluster name
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: "${cluster_name}" # replace with your cluster name
  securityGroupSelectorTerms:
    - id: ${EKS_NODE_SG}

  metadataOptions:
    httpEndpoint: enabled
    httpProtocolIPv6: disabled
    httpPutResponseHopLimit: 1
    httpTokens: optional

  tags:
    karpenter.sh/discovery: ${cluster_name}
    Name: "gnostcms-nodepool"
    created_by:  "manan_g"
    maintained_by:   "manan_g"
    owner:  "manan_g"
    sensitive:  "yes"
    environment: "gnostcms"
    tenant: "gnostcms"

---

apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: redis-nodepool
spec:
  template:
    metadata:
      labels:
        intent: redis
    spec:
      requirements:
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["on-demand"]
        - key: karpenter.k8s.aws/instance-category
          operator: In
          values: ["t"]
        - key: karpenter.k8s.aws/instance-family
          operator: In
          values: ["t4g", "t3a"]
        - key: karpenter.k8s.aws/instance-size
          operator: In
          values: ["medium","large","xlarge","2xlarge","small"]
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: redis-ec2nodeclass
  limits:
    cpu: 100
  disruption:
    consolidationPolicy: WhenEmptyOrUnderutilized
    consolidateAfter: Never
---
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: redis-ec2nodeclass
spec:
  amiFamily: AL2023
  amiSelectorTerms:
     - alias: al2023@latest
  blockDeviceMappings:
  - deviceName: /dev/xvda
    ebs:
      encrypted:  false #true
      volumeSize: 50Gi
      volumeType: gp3
  instanceProfile: "${INSTANCE_PROFILE}" # replace with your cluster name
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: "${cluster_name}" # replace with your cluster name
  securityGroupSelectorTerms:
    - id: ${EKS_NODE_SG}

  metadataOptions:
    httpEndpoint: enabled
    httpProtocolIPv6: disabled
    httpPutResponseHopLimit: 1
    httpTokens: optional

  tags:
    karpenter.sh/discovery: ${cluster_name}
    Name: "redis-nodepool"
    created_by:  "manan_g"
    maintained_by:   "manan_g"
    owner:  "manan_g"
    sensitive:  "yes"
    environment: "gnostcms"
    tenant: "gnostcms"